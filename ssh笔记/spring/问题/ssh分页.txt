 HIbernate的hibernateTemplate.findByCriteria用法

DetachedCriteria criteria=DetachedCriteria.forClass(User.class);

 1. 查所有记录不分页
hibernateTemplate.findByCriteria(criteria);//查询所有对象

2.分页
  hibernateTemplate.findByCriteria(criteria, begin,pagesize(maxsize));//分页查询

//添加查询条件
 5 criteria.add()

 BDOrder 实体和 BDOrderDetail 实体
 2 DetachedCriteria criteria = DetachedCriteria.forClass(BDOrder.class);
 3 
 4 //添加查询条件
 5 criteria.add()
 6 
 7 //初始化BDOrderDeaila 的criterial
 8 DetachedCriteria criteriaDetail = DetachedCriteria.forClass(BDOrderDetail.class);
 9 
10 //添加OrderDetail实体的查询条件
11 criteriaDetial.add(Restrictions.like("detailStatus", "%3N"))
12 
13 //设置这个表的查询结果。注意details为实体映射文件中对应的字段，不是数据库中的列名
14 criteriaDetail.setProjection(Property.forName("details "));
15 
16 //设置去除查询结果中的重复数据
17 criteriaDetail.setResultTransformer(criteriaDetail.DISTINCT_ROOT_ENTITY);
18 
19 
20 //关联两个实体的关系
21 criteria.add(Property.forName("id").in(criteriaDetail));
22 
23 
24 //然后直接使用criteria去查询就可以了。
25 //查找结果。
26 List<BDOrder> orderList = this.getHibernateTemplate().findByCriteria(criteria);
27 
28 //以上可以实现最开始的那句sql，




MatchMode.START：字符串在最前面的位置.相当于"like 'key%'"
MatchMode.END：字符串在最后面的位置.相当于"like '%key'"
MatchMode.ANYWHERE：字符串在中间匹配.相当于"like '%key%'"
MatchMode.EXACT：字符串精确匹配.相当于"like 'key'"





例子  
查询年龄在20-30岁之间的所有学生对象  
List list = session.createCriteria(Student.class)  
      .add(Restrictions.between("age",new Integer(20),new Integer(30)).list();  
查询学生姓名在AAA,BBB,CCC之间的学生对象  
String[] names = {"AAA","BBB","CCC"};  
List list = session.createCriteria(Student.class)  
      .add(Restrictions.in("name",names)).list();  
查询年龄为空的学生对象  
List list = session.createCriteria(Student.class)  
      .add(Restrictions.isNull("age")).list();  
查询年龄等于20或者年龄为空的学生对象  
List list = session.createCriteria(Student.class)  
      .add(Restrictions.or(Restrictions.eq("age",new Integer(20)),  
                 Restrictions.isNull("age")).list();  
--------------------------------------------------------------------  
使用QBC实现动态查询   
public List findStudents(String name,int age){  
 Criteria criteria = session.createCriteria(Student.class);  
 if(name != null){  
  criteria.add(Restrictions.liek("name",name,MatchMode.ANYWHERE));  
 }  
 if(age != 0){  
  criteria.add(Restrictions.eq("age",new Integer(age)));  
 }  
 criteria.addOrder(Order.asc("name"));//根据名字升序排列  
 return criteria.list();  
}  
   
-----------------------------------------------------------------------------------  
今天用了写hibernate高级查询时用了Restrictions(当然Expression也是可以以的)这个类.感觉不错.  
下面的代码写的不易读.其实核心就是一句  
Restrictions.or(Restrictions.like(),Restrictions.or(Restrictions.like,........))  
里面的or可以无限加的.还是比较好用  
  
Session session = getHibernateTemplate().getSessionFactory()  
                .openSession();  
        Criteria criteria = session.createCriteria(Film.class);  
        List<Film> list = criteria.add(  
            Restrictions.or(Restrictions.like("description", key,MatchMode.ANYWHERE),  
            Restrictions.or(Restrictions.like("name", key,MatchMode.ANYWHERE),  
                Restrictions.or(    Restrictions.like("direct", key,MatchMode.ANYWHERE),  
                Restrictions.or(Restrictions.like("mainplay",key,MatchMode.ANYWHERE),  
                        Restrictions.like("filearea", key,MatchMode.ANYWHERE)))))).list();  
  
        session.close();  
        return list;  